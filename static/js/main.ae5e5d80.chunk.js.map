{"version":3,"sources":["reactComponentLib/index.js","App.tsx","serviceWorker.js","index.tsx"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__makeTemplateObject","cooked","raw","defineProperty","value","templateObject_1","templateObject_1$1","templateObject_1$2","templateObject_1$3","Wrapper","styled","div","TestComponent","_a","text","React","createElement","Btn","button","width","bColor","JustButton","Btn$1","NormalButton","props","Btn$2","NormalButtonWithProps","children","defaultProps","StyledDiv","TheBtn","App","className","style","color","marginLeft","display","onClick","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAmBIA,EAAW,WAQX,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,IAEKU,MAAMC,KAAMP,YAGhC,SAASQ,EAAqBC,EAAQC,GAElC,OADIhB,OAAOiB,eAAkBjB,OAAOiB,eAAeF,EAAQ,MAAO,CAAEG,MAAOF,IAAiBD,EAAOC,IAAMA,EAClGD,EAGX,IAKII,EAOAC,EAIAC,EAYAC,EA5BAC,EAAUC,IAAOC,IAAIN,IAAqBA,EAAmBL,EAAqB,CAAC,0DAA2D,CAAC,6DAC/IY,EAAgB,SAAUC,GAC1B,IAAIC,EAAOD,EAAGC,KACd,OAAQC,IAAMC,cAAcP,EAAS,KAAMK,GAAc,mBAIzDG,EAAMP,IAAOQ,OAAOZ,IAAuBA,EAAqBN,EAAqB,CAAC,+CAAgD,oBAAqB,OAAQ,CAAC,+CAAgD,oBAAqB,UAAU,SAAUN,GAAK,OAAOA,EAAEyB,MAAQzB,EAAEyB,MAAQ,UAAW,SAAUzB,GAAK,OAAOA,EAAE0B,OAAS1B,EAAE0B,OAAS,aACpVC,EAAa,SAAUR,GACvB,IAAIC,EAAOD,EAAGC,KAAMM,EAASP,EAAGO,OAAQD,EAAQN,EAAGM,MACnD,OAAQJ,IAAMC,cAAcC,EAAK,CAAEG,OAAQA,EAAQD,MAAOA,GAASL,GAAc,gBAIjFQ,EAAQZ,IAAOQ,OAAOX,IAAuBA,EAAqBP,EAAqB,CAAC,oDAAqD,OAAQ,CAAC,oDAAqD,UAAU,SAAUN,GAAK,OAAOA,EAAE0B,OAAS1B,EAAE0B,OAAS,aACjQG,EAAe,SAAUC,GAAS,OAAQT,IAAMC,cAAcM,EAAOrC,EAAS,GAAIuC,EAAO,CAAEJ,OAAQI,EAAMJ,SAAWI,EAAMV,KAAOU,EAAMV,KAAO,gBAG9IW,EAAQf,IAAOQ,OAAOV,IAAuBA,EAAqBR,EAAqB,CAAC,oDAAqD,OAAQ,CAAC,oDAAqD,UAAU,SAAUN,GAAK,OAAOA,EAAE0B,OAAS1B,EAAE0B,OAAS,aACjQM,EAAwB,SAAUF,GAClC,OAAQT,IAAMC,cAAcS,EAAOxC,EAAS,GAAIuC,EAAO,CAAEJ,OAAQI,EAAMJ,SACnEI,EAAMV,KAAOU,EAAMV,KAAO,cAC1BU,EAAMG,W,+OAEdD,EAAsBE,aAAe,CACjCd,KAAM,UACNM,OAAQ,WCxDZ,IAAMS,EAAYnB,IAAOC,IAAV,KAKTmB,EAASpB,YAAOa,EAAPb,CAAH,KAoBGqB,E,iLAbX,OACE,6BACE,kBAAC,EAAD,CAAejB,KAAK,wCACpB,kBAACgB,EAAD,CAAQhB,KAAK,QACb,kBAAC,EAAD,CAAYK,MAAM,UAClB,kBAAC,EAAD,CAAuBa,UAAU,MAAMC,MAAO,CAACC,MAAO,QAASC,WAAY,OAAQC,QAAS,UAAU,0BAAMH,MAAO,CAACC,MAAO,WAArB,WACtG,kBAAC,EAAD,CAAcG,QAAS,kBAAIC,QAAQC,IAAI,UACvC,kBAACV,EAAD,0C,GATUW,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae5e5d80.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport styled from 'styled-components';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n}\n\nvar Wrapper = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  padding: 10px;\\n  color: red;\\n  font-size: 2em;\\n\"], [\"\\n  padding: 10px;\\n  color: red;\\n  font-size: 2em;\\n\"])));\r\nvar TestComponent = function (_a) {\r\n    var text = _a.text;\r\n    return (React.createElement(Wrapper, null, text ? text : 'Test Component'));\r\n};\r\nvar templateObject_1;\n\nvar Btn = styled.button(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([\"\\n  padding: 10px;\\n  color: red;\\n  width: \", \";\\n  background: \", \";\\n\"], [\"\\n  padding: 10px;\\n  color: red;\\n  width: \", \";\\n  background: \", \";\\n\"])), function (p) { return p.width ? p.width : 'auto'; }, function (p) { return p.bColor ? p.bColor : \"#d4d4d4\"; });\r\nvar JustButton = function (_a) {\r\n    var text = _a.text, bColor = _a.bColor, width = _a.width;\r\n    return (React.createElement(Btn, { bColor: bColor, width: width }, text ? text : 'Just Button'));\r\n};\r\nvar templateObject_1$1;\n\nvar Btn$1 = styled.button(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([\"\\n  padding: 10px;\\n  color: red;\\n  background: \", \";\\n\"], [\"\\n  padding: 10px;\\n  color: red;\\n  background: \", \";\\n\"])), function (p) { return p.bColor ? p.bColor : \"#d4d4d4\"; });\r\nvar NormalButton = function (props) { return (React.createElement(Btn$1, __assign({}, props, { bColor: props.bColor }), props.text ? props.text : 'Just Button')); };\r\nvar templateObject_1$2;\n\nvar Btn$2 = styled.button(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([\"\\n  padding: 10px;\\n  color: red;\\n  background: \", \";\\n\"], [\"\\n  padding: 10px;\\n  color: red;\\n  background: \", \";\\n\"])), function (p) { return p.bColor ? p.bColor : \"#d4d4d4\"; });\r\nvar NormalButtonWithProps = function (props) {\r\n    return (React.createElement(Btn$2, __assign({}, props, { bColor: props.bColor }),\r\n        props.text ? props.text : 'Just Button',\r\n        props.children));\r\n};\r\nNormalButtonWithProps.defaultProps = {\r\n    text: \"the btn\",\r\n    bColor: \"#d4d4d4\"\r\n};\r\nvar templateObject_1$3;\n\nexport { JustButton, NormalButton, NormalButtonWithProps, TestComponent };\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport { TestComponent, JustButton, NormalButton, NormalButtonWithProps } from './reactComponentLib';\n\nconst StyledDiv = styled.div`\n  padding: 10px;\n  background-color: blue;\n  color: white;\n`;\nconst TheBtn = styled(NormalButton)`\n  color: orange;\n  height: 25px;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TestComponent text=\"Styled Component from React library\" />\n        <TheBtn text=\"btn\"/>\n        <JustButton width=\"200px\" />\n        <NormalButtonWithProps className=\"asd\" style={{color: 'black', marginLeft: '25px', display: 'block'}}><span style={{color: 'purple'}}>Stolec</span></NormalButtonWithProps>\n        <NormalButton onClick={()=>console.log('asd')} />\n        <StyledDiv>Example App styled component</StyledDiv>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}